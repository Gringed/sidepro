datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Links {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  slug      String    @unique
  sidefolio Sidefolio @relation(fields: [sideId], references: [id])
  sideId    String    @db.ObjectId
  type      String
  body      String
  cta       String
  stats     String
  link      String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

enum Type {
  TEXT
  IMAGE
  LINK
  TITLE
  ME
}

model Review {
  id       String @id @default(auto()) @map("_id") @db.ObjectId
  author   User   @relation(fields: [authorId], references: [id])
  authorId String @db.ObjectId
  message  String
}

model Section {
  id           String    @id @default(auto()) @map("_id") @db.ObjectId
  slug         String?   @unique
  sidefolio    Sidefolio @relation(fields: [sideId], references: [id])
  sideId       String    @unique @db.ObjectId
  title        String?
  name         String?
  bio          String?
  location     String?
  link         Json?
  image        String?
  showImage    Boolean   @default(true)
  showTitleUrl Boolean   @default(true)
  type         Type?
  background   String?
  color        String?
  description  String?
  i            String?   @unique
  x            Int?
  y            Int?
  w            Int?      @default(2)
  h            Int?      @default(2)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
}

enum compactType {
  vertical
  horizontal
  null
}

model Sidefolio {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  slug        String    @unique
  title       String
  author      User      @relation(fields: [authorId], references: [id])
  authorId    String    @db.ObjectId
  bio         String?
  location    String?
  compactType String?
  color       String?
  background  String?
  section     Section[]
  links       Links[]
  counter     Int       @default(0)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

enum Plan {
  FREEMIUM
  PREMIUM_ONE
  PREMIUM_LIFE
}

model User {
  id               String      @id @default(auto()) @map("_id") @db.ObjectId
  email            String      @unique
  name             String?
  image            String?
  plan             Plan        @default(FREEMIUM)
  stripeCustomerId String?
  emailVerified    DateTime?
  review           Review[]
  sidefolio        Sidefolio[]
  Account          Account[]
  Session          Session[]
  createdAt        DateTime    @default(now())
  updatedAt        DateTime    @updatedAt
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
}
